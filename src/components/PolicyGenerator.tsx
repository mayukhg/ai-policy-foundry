import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Badge } from "@/components/ui/badge";
import { Play, Download, Copy, Settings, CheckCircle } from "lucide-react";

export const PolicyGenerator = () => {
  const [selectedService, setSelectedService] = useState("");
  const [generatedPolicy, setGeneratedPolicy] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);

  const cloudServices = [
    "AWS Lambda",
    "AWS S3",
    "AWS EC2",
    "Azure Functions", 
    "Azure Storage",
    "Azure VM",
    "GCP Cloud Functions",
    "GCP Cloud Storage",
    "GCP Compute Engine"
  ];

  const complianceFrameworks = [
    "CIS Benchmarks v1.4.0",
    "NIST Cybersecurity Framework",
    "ISO 27001:2013",
    "SOC 2 Type II",
    "PCI DSS v3.2.1"
  ];

  const handleGeneratePolicy = async () => {
    setIsGenerating(true);
    // Simulate AI policy generation
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    const samplePolicy = `# ${selectedService} Security Policy
# Auto-generated by AI Policy Foundry
# Compliance: CIS Benchmarks v1.4.0

apiVersion: v1
kind: SecurityPolicy
metadata:
  name: ${selectedService.toLowerCase().replace(/\s+/g, '-')}-security-policy
  labels:
    service: "${selectedService}"
    compliance: "cis-v1.4.0"
    risk-level: "medium"
    generated-by: "ai-policy-foundry"
    
spec:
  # Encryption Requirements
  encryption:
    atRest: true
    inTransit: true
    algorithm: "AES-256"
    
  # Access Control
  access:
    authentication: "required"
    authorization: "rbac"
    mfa: true
    
  # Network Security
  network:
    allowedSources:
      - "10.0.0.0/8"
      - "172.16.0.0/12"
    blockedPorts:
      - 22
      - 3389
      - 1433
    
  # Monitoring & Logging
  monitoring:
    logging: "enabled"
    retention: "90d"
    alerting: "enabled"
    
  # Compliance Controls
  compliance:
    framework: "CIS"
    version: "1.4.0"
    controls:
      - id: "3.1"
        description: "Ensure encryption in transit"
        status: "implemented"
      - id: "3.2" 
        description: "Ensure encryption at rest"
        status: "implemented"
        
  # Risk Assessment
  risk:
    level: "medium"
    threats:
      - "data-exfiltration"
      - "privilege-escalation"
    mitigations:
      - "encryption"
      - "access-control"
      - "monitoring"`;
      
    setGeneratedPolicy(samplePolicy);
    setIsGenerating(false);
  };

  return (
    <div className="space-y-8">
      <div className="text-center">
        <h2 className="text-3xl font-bold text-foreground mb-4">AI-Powered Policy Generator</h2>
        <p className="text-xl text-muted-foreground">Generate security policies in seconds with AI intelligence</p>
      </div>

      <div className="grid lg:grid-cols-2 gap-8">
        {/* Configuration Panel */}
        <Card className="enterprise-card">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Settings className="w-5 h-5 text-primary" />
              Policy Configuration
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="service">Cloud Service</Label>
              <Select value={selectedService} onValueChange={setSelectedService}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a cloud service" />
                </SelectTrigger>
                <SelectContent>
                  {cloudServices.map((service) => (
                    <SelectItem key={service} value={service}>{service}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="business-unit">Business Unit</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select business unit" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="upstream">Upstream</SelectItem>
                  <SelectItem value="downstream">Downstream</SelectItem>
                  <SelectItem value="trading">Trading & Shipping</SelectItem>
                  <SelectItem value="corporate">Corporate</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="environment">Environment</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select environment" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="production">Production</SelectItem>
                  <SelectItem value="staging">Staging</SelectItem>
                  <SelectItem value="development">Development</SelectItem>
                  <SelectItem value="testing">Testing</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="compliance">Compliance Framework</Label>
              <Select>
                <SelectTrigger>
                  <SelectValue placeholder="Select compliance framework" />
                </SelectTrigger>
                <SelectContent>
                  {complianceFrameworks.map((framework) => (
                    <SelectItem key={framework} value={framework}>{framework}</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="requirements">Additional Requirements</Label>
              <Textarea 
                placeholder="Enter specific security requirements or constraints..."
                className="min-h-[100px]"
              />
            </div>

            <Button 
              variant="hero" 
              onClick={handleGeneratePolicy}
              disabled={!selectedService || isGenerating}
              className="w-full"
            >
              <Play className="w-4 h-4" />
              {isGenerating ? "Generating Policy..." : "Generate Security Policy"}
            </Button>
          </CardContent>
        </Card>

        {/* Output Panel */}
        <Card className="enterprise-card">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span className="flex items-center gap-2">
                <CheckCircle className="w-5 h-5 text-success" />
                Generated Policy
              </span>
              {generatedPolicy && (
                <div className="flex gap-2">
                  <Button variant="ghost" size="sm">
                    <Copy className="w-4 h-4" />
                  </Button>
                  <Button variant="ghost" size="sm">
                    <Download className="w-4 h-4" />
                  </Button>
                </div>
              )}
            </CardTitle>
          </CardHeader>
          <CardContent>
            {!generatedPolicy && !isGenerating && (
              <div className="h-[400px] flex items-center justify-center text-center">
                <div>
                  <Settings className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                  <p className="text-muted-foreground">Configure your policy settings and click generate to start</p>
                </div>
              </div>
            )}

            {isGenerating && (
              <div className="h-[400px] flex items-center justify-center">
                <div className="text-center">
                  <div className="w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
                  <p className="text-muted-foreground">AI is analyzing security requirements...</p>
                </div>
              </div>
            )}

            {generatedPolicy && (
              <Tabs defaultValue="yaml" className="w-full">
                <TabsList className="grid w-full grid-cols-3">
                  <TabsTrigger value="yaml">YAML</TabsTrigger>
                  <TabsTrigger value="json">JSON</TabsTrigger>
                  <TabsTrigger value="terraform">Terraform</TabsTrigger>
                </TabsList>
                <TabsContent value="yaml" className="mt-4">
                  <div className="relative">
                    <pre className="bg-muted p-4 rounded-lg text-sm overflow-auto max-h-[400px] text-foreground">
                      <code>{generatedPolicy}</code>
                    </pre>
                  </div>
                </TabsContent>
                <TabsContent value="json" className="mt-4">
                  <div className="relative">
                    <pre className="bg-muted p-4 rounded-lg text-sm overflow-auto max-h-[400px] text-foreground">
                      <code>{JSON.stringify({ message: "JSON format conversion in progress..." }, null, 2)}</code>
                    </pre>
                  </div>
                </TabsContent>
                <TabsContent value="terraform" className="mt-4">
                  <div className="relative">
                    <pre className="bg-muted p-4 rounded-lg text-sm overflow-auto max-h-[400px] text-foreground">
                      <code># Terraform HCL format conversion in progress...</code>
                    </pre>
                  </div>
                </TabsContent>
              </Tabs>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Policy Insights */}
      {generatedPolicy && (
        <Card className="enterprise-card">
          <CardHeader>
            <CardTitle>Policy Insights & Recommendations</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-3 gap-6">
              <div className="space-y-2">
                <h4 className="font-semibold text-foreground">Compliance Mapping</h4>
                <div className="space-y-1">
                  <Badge variant="secondary">CIS 3.1 - Encryption</Badge>
                  <Badge variant="secondary">CIS 3.2 - Data Protection</Badge>
                  <Badge variant="secondary">CIS 5.1 - Access Control</Badge>
                </div>
              </div>
              <div className="space-y-2">
                <h4 className="font-semibold text-foreground">Risk Assessment</h4>
                <div className="space-y-1">
                  <div className="flex items-center gap-2">
                    <div className="w-2 h-2 rounded-full bg-warning"></div>
                    <span className="text-sm">Medium Risk Level</span>
                  </div>
                  <div className="text-sm text-muted-foreground">Based on service type and configuration</div>
                </div>
              </div>
              <div className="space-y-2">
                <h4 className="font-semibold text-foreground">Next Steps</h4>
                <div className="space-y-1 text-sm text-muted-foreground">
                  <p>• Review with security team</p>
                  <p>• Test in staging environment</p>
                  <p>• Schedule deployment</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};